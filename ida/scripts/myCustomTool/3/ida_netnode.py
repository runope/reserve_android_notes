# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IDA Plugin SDK API wrapper: netnode
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_netnode
else:
    import _ida_netnode

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """
    Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass
    """
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """
    Meta class to enforce nondynamic attributes (no new attributes) for a class
    """
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_PYTHON_LEGACY_BOOL = _ida_netnode.SWIG_PYTHON_LEGACY_BOOL

import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

BADNODE = _ida_netnode.BADNODE
"""
A number to represent a bad netnode reference.
"""

class netnode(object):
    r"""
    Proxy of C++ netnode class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""


        __init__(self, num=nodeidx_t(-1)) -> netnode
            num: nodeidx_t
        

        __init__(self, _name, namlen=0, do_create=False) -> netnode
            _name: char const *
            namlen: size_t
            do_create: bool
        """
        _ida_netnode.netnode_swiginit(self, _ida_netnode.new_netnode(*args))

    def create(self, *args) -> "bool":
        r"""


        create(self, _name, namlen=0) -> bool
            _name: char const *
            namlen: size_t
        """
        return _ida_netnode.netnode_create(self, *args)

    def kill(self, *args) -> "void":
        r"""
        kill(self)
        """
        return _ida_netnode.netnode_kill(self, *args)

    def get_name(self, *args) -> "ssize_t":
        r"""
        get_name(self) -> ssize_t
        """
        return _ida_netnode.netnode_get_name(self, *args)

    def rename(self, *args) -> "bool":
        r"""


        rename(self, newname, namlen=0) -> bool
            newname: char const *
            namlen: size_t
        """
        return _ida_netnode.netnode_rename(self, *args)

    def valobj(self, *args) -> "ssize_t":
        r"""
        valobj(self) -> ssize_t
        """
        return _ida_netnode.netnode_valobj(self, *args)

    def valstr(self, *args) -> "ssize_t":
        r"""
        valstr(self) -> ssize_t
        """
        return _ida_netnode.netnode_valstr(self, *args)

    def set(self, *args) -> "bool":
        r"""


        set(self, value) -> bool
            value: void const *
        """
        return _ida_netnode.netnode_set(self, *args)

    def delvalue(self, *args) -> "bool":
        r"""
        delvalue(self) -> bool
        """
        return _ida_netnode.netnode_delvalue(self, *args)

    def set_long(self, *args) -> "bool":
        r"""


        set_long(self, x) -> bool
            x: nodeidx_t
        """
        return _ida_netnode.netnode_set_long(self, *args)

    def value_exists(self, *args) -> "bool":
        r"""
        value_exists(self) -> bool
        """
        return _ida_netnode.netnode_value_exists(self, *args)

    def long_value(self, *args) -> "nodeidx_t":
        r"""
        long_value(self) -> nodeidx_t
        """
        return _ida_netnode.netnode_long_value(self, *args)

    def altval(self, *args) -> "nodeidx_t":
        r"""


        altval(self, alt, tag=atag) -> nodeidx_t
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altval(self, *args)

    def altval_ea(self, *args) -> "nodeidx_t":
        r"""


        altval_ea(self, ea, tag=atag) -> nodeidx_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_altval_ea(self, *args)

    def altset(self, *args) -> "bool":
        r"""


        altset(self, alt, value, tag=atag) -> bool
            alt: nodeidx_t
            value: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altset(self, *args)

    def altset_ea(self, *args) -> "bool":
        r"""


        altset_ea(self, ea, value, tag=atag) -> bool
            ea: ea_t
            value: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altset_ea(self, *args)

    def altdel_ea(self, *args) -> "bool":
        r"""


        altdel_ea(self, ea, tag=atag) -> bool
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_altdel_ea(self, *args)

    def easet(self, *args) -> "bool":
        r"""


        easet(self, ea, addr, tag) -> bool
            ea: ea_t
            addr: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_easet(self, *args)

    def eaget(self, *args) -> "ea_t":
        r"""


        eaget(self, ea, tag) -> ea_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_eaget(self, *args)

    def eadel(self, *args) -> "bool":
        r"""


        eadel(self, ea, tag) -> bool
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_eadel(self, *args)

    def easet_idx(self, *args) -> "bool":
        r"""


        easet_idx(self, idx, addr, tag) -> bool
            idx: nodeidx_t
            addr: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_easet_idx(self, *args)

    def eaget_idx(self, *args) -> "ea_t":
        r"""


        eaget_idx(self, idx, tag) -> ea_t
            idx: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_eaget_idx(self, *args)

    def easet_idx8(self, *args) -> "bool":
        r"""


        easet_idx8(self, idx, addr, tag) -> bool
            idx: uchar
            addr: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_easet_idx8(self, *args)

    def eaget_idx8(self, *args) -> "ea_t":
        r"""


        eaget_idx8(self, idx, tag) -> ea_t
            idx: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_eaget_idx8(self, *args)

    def eadel_idx8(self, *args) -> "bool":
        r"""


        eadel_idx8(self, idx, tag) -> bool
            idx: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_eadel_idx8(self, *args)

    def altfirst(self, *args) -> "nodeidx_t":
        r"""


        altfirst(self, tag=atag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altfirst(self, *args)

    def altnext(self, *args) -> "nodeidx_t":
        r"""


        altnext(self, cur, tag=atag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altnext(self, *args)

    def altlast(self, *args) -> "nodeidx_t":
        r"""


        altlast(self, tag=atag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altlast(self, *args)

    def altprev(self, *args) -> "nodeidx_t":
        r"""


        altprev(self, cur, tag=atag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altprev(self, *args)

    def altshift(self, *args) -> "size_t":
        r"""


        altshift(self, _from, to, size, tag=atag) -> size_t
            from: nodeidx_t
            to: nodeidx_t
            size: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altshift(self, *args)

    def charval(self, *args) -> "uchar":
        r"""


        charval(self, alt, tag) -> uchar
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charval(self, *args)

    def charset(self, *args) -> "bool":
        r"""


        charset(self, alt, val, tag) -> bool
            alt: nodeidx_t
            val: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charset(self, *args)

    def chardel(self, *args) -> "bool":
        r"""


        chardel(self, alt, tag) -> bool
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_chardel(self, *args)

    def charval_ea(self, *args) -> "uchar":
        r"""


        charval_ea(self, ea, tag) -> uchar
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_charval_ea(self, *args)

    def charset_ea(self, *args) -> "bool":
        r"""


        charset_ea(self, ea, val, tag) -> bool
            ea: ea_t
            val: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charset_ea(self, *args)

    def chardel_ea(self, *args) -> "bool":
        r"""


        chardel_ea(self, ea, tag) -> bool
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_chardel_ea(self, *args)

    def charfirst(self, *args) -> "nodeidx_t":
        r"""


        charfirst(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charfirst(self, *args)

    def charnext(self, *args) -> "nodeidx_t":
        r"""


        charnext(self, cur, tag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charnext(self, *args)

    def charlast(self, *args) -> "nodeidx_t":
        r"""


        charlast(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charlast(self, *args)

    def charprev(self, *args) -> "nodeidx_t":
        r"""


        charprev(self, cur, tag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charprev(self, *args)

    def charshift(self, *args) -> "size_t":
        r"""


        charshift(self, _from, to, size, tag) -> size_t
            from: nodeidx_t
            to: nodeidx_t
            size: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charshift(self, *args)

    def altval_idx8(self, *args) -> "nodeidx_t":
        r"""


        altval_idx8(self, alt, tag) -> nodeidx_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_altval_idx8(self, *args)

    def altset_idx8(self, *args) -> "bool":
        r"""


        altset_idx8(self, alt, val, tag) -> bool
            alt: uchar
            val: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altset_idx8(self, *args)

    def altdel_idx8(self, *args) -> "bool":
        r"""


        altdel_idx8(self, alt, tag) -> bool
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_altdel_idx8(self, *args)

    def altfirst_idx8(self, *args) -> "nodeidx_t":
        r"""


        altfirst_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altfirst_idx8(self, *args)

    def altnext_idx8(self, *args) -> "nodeidx_t":
        r"""


        altnext_idx8(self, cur, tag) -> nodeidx_t
            cur: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_altnext_idx8(self, *args)

    def altlast_idx8(self, *args) -> "nodeidx_t":
        r"""


        altlast_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altlast_idx8(self, *args)

    def altprev_idx8(self, *args) -> "nodeidx_t":
        r"""


        altprev_idx8(self, cur, tag) -> nodeidx_t
            cur: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_altprev_idx8(self, *args)

    def charval_idx8(self, *args) -> "uchar":
        r"""


        charval_idx8(self, alt, tag) -> uchar
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charval_idx8(self, *args)

    def charset_idx8(self, *args) -> "bool":
        r"""


        charset_idx8(self, alt, val, tag) -> bool
            alt: uchar
            val: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charset_idx8(self, *args)

    def chardel_idx8(self, *args) -> "bool":
        r"""


        chardel_idx8(self, alt, tag) -> bool
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_chardel_idx8(self, *args)

    def charfirst_idx8(self, *args) -> "nodeidx_t":
        r"""


        charfirst_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charfirst_idx8(self, *args)

    def charnext_idx8(self, *args) -> "nodeidx_t":
        r"""


        charnext_idx8(self, cur, tag) -> nodeidx_t
            cur: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charnext_idx8(self, *args)

    def charlast_idx8(self, *args) -> "nodeidx_t":
        r"""


        charlast_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_charlast_idx8(self, *args)

    def charprev_idx8(self, *args) -> "nodeidx_t":
        r"""


        charprev_idx8(self, cur, tag) -> nodeidx_t
            cur: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_charprev_idx8(self, *args)

    def altdel(self, *args) -> "bool":
        r"""


        altdel(self, alt, tag=atag) -> bool
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_altdel(self, *args)

    def altdel_all(self, *args) -> "bool":
        r"""


        altdel_all(self, tag=atag) -> bool
            tag: uchar
        """
        return _ida_netnode.netnode_altdel_all(self, *args)

    def supval(self, *args) -> "ssize_t":
        r"""


        supval(self, alt, tag=stag) -> ssize_t
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supval(self, *args)

    def supval_ea(self, *args) -> "ssize_t":
        r"""


        supval_ea(self, ea, tag=stag) -> ssize_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_supval_ea(self, *args)

    def supstr(self, *args) -> "ssize_t":
        r"""


        supstr(self, alt, tag=stag) -> ssize_t
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supstr(self, *args)

    def supstr_ea(self, *args) -> "ssize_t":
        r"""


        supstr_ea(self, ea, tag=stag) -> ssize_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_supstr_ea(self, *args)

    def supdel_ea(self, *args) -> "bool":
        r"""


        supdel_ea(self, ea, tag=stag) -> bool
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_supdel_ea(self, *args)

    def lower_bound(self, *args) -> "nodeidx_t":
        r"""


        lower_bound(self, cur, tag=stag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_lower_bound(self, *args)

    def lower_bound_ea(self, *args) -> "nodeidx_t":
        r"""


        lower_bound_ea(self, ea, tag=stag) -> nodeidx_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_lower_bound_ea(self, *args)

    def supfirst(self, *args) -> "nodeidx_t":
        r"""


        supfirst(self, tag=stag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supfirst(self, *args)

    def supnext(self, *args) -> "nodeidx_t":
        r"""


        supnext(self, cur, tag=stag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supnext(self, *args)

    def suplast(self, *args) -> "nodeidx_t":
        r"""


        suplast(self, tag=stag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_suplast(self, *args)

    def supprev(self, *args) -> "nodeidx_t":
        r"""


        supprev(self, cur, tag=stag) -> nodeidx_t
            cur: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supprev(self, *args)

    def supshift(self, *args) -> "size_t":
        r"""


        supshift(self, _from, to, size, tag=stag) -> size_t
            from: nodeidx_t
            to: nodeidx_t
            size: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supshift(self, *args)

    def supval_idx8(self, *args) -> "ssize_t":
        r"""


        supval_idx8(self, alt, tag) -> ssize_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supval_idx8(self, *args)

    def supstr_idx8(self, *args) -> "ssize_t":
        r"""


        supstr_idx8(self, alt, tag) -> ssize_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supstr_idx8(self, *args)

    def supset_idx8(self, *args) -> "bool":
        r"""


        supset_idx8(self, alt, value, tag) -> bool
            alt: uchar
            value: void const *
            tag: uchar
        """
        return _ida_netnode.netnode_supset_idx8(self, *args)

    def supdel_idx8(self, *args) -> "bool":
        r"""


        supdel_idx8(self, alt, tag) -> bool
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supdel_idx8(self, *args)

    def lower_bound_idx8(self, *args) -> "nodeidx_t":
        r"""


        lower_bound_idx8(self, alt, tag) -> nodeidx_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_lower_bound_idx8(self, *args)

    def supfirst_idx8(self, *args) -> "nodeidx_t":
        r"""


        supfirst_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supfirst_idx8(self, *args)

    def supnext_idx8(self, *args) -> "nodeidx_t":
        r"""


        supnext_idx8(self, alt, tag) -> nodeidx_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supnext_idx8(self, *args)

    def suplast_idx8(self, *args) -> "nodeidx_t":
        r"""


        suplast_idx8(self, tag) -> nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_suplast_idx8(self, *args)

    def supprev_idx8(self, *args) -> "nodeidx_t":
        r"""


        supprev_idx8(self, alt, tag) -> nodeidx_t
            alt: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supprev_idx8(self, *args)

    def supdel(self, *args) -> "bool":
        r"""


        supdel(self, alt, tag=stag) -> bool
            alt: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supdel(self, *args)

    def supdel_all(self, *args) -> "bool":
        r"""


        supdel_all(self, tag) -> bool
            tag: uchar
        """
        return _ida_netnode.netnode_supdel_all(self, *args)

    def supdel_range(self, *args) -> "int":
        r"""


        supdel_range(self, idx1, idx2, tag) -> int
            idx1: nodeidx_t
            idx2: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_supdel_range(self, *args)

    def supdel_range_idx8(self, *args) -> "int":
        r"""


        supdel_range_idx8(self, idx1, idx2, tag) -> int
            idx1: uchar
            idx2: uchar
            tag: uchar
        """
        return _ida_netnode.netnode_supdel_range_idx8(self, *args)

    def hashval(self, *args) -> "ssize_t":
        r"""


        hashval(self, idx, tag=htag) -> ssize_t
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashval(self, *args)

    def hashstr(self, *args) -> "ssize_t":
        r"""


        hashstr(self, idx, tag=htag) -> ssize_t
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashstr(self, *args)

    def hashval_long(self, *args) -> "nodeidx_t":
        r"""


        hashval_long(self, idx, tag=htag) -> nodeidx_t
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashval_long(self, *args)

    def hashset(self, *args) -> "bool":
        r"""


        hashset(self, idx, value, tag=htag) -> bool
            idx: char const *
            value: void const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashset(self, *args)

    def hashset_idx(self, *args) -> "bool":
        r"""


        hashset_idx(self, idx, value, tag=htag) -> bool
            idx: char const *
            value: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_hashset_idx(self, *args)

    def hashdel(self, *args) -> "bool":
        r"""


        hashdel(self, idx, tag=htag) -> bool
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashdel(self, *args)

    def hashfirst(self, *args) -> "ssize_t":
        r"""


        hashfirst(self, tag=htag) -> ssize_t
            tag: uchar
        """
        return _ida_netnode.netnode_hashfirst(self, *args)

    def hashnext(self, *args) -> "ssize_t":
        r"""


        hashnext(self, idx, tag=htag) -> ssize_t
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashnext(self, *args)

    def hashlast(self, *args) -> "ssize_t":
        r"""


        hashlast(self, tag=htag) -> ssize_t
            tag: uchar
        """
        return _ida_netnode.netnode_hashlast(self, *args)

    def hashprev(self, *args) -> "ssize_t":
        r"""


        hashprev(self, idx, tag=htag) -> ssize_t
            idx: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_hashprev(self, *args)

    def hashdel_all(self, *args) -> "bool":
        r"""


        hashdel_all(self, tag=htag) -> bool
            tag: uchar
        """
        return _ida_netnode.netnode_hashdel_all(self, *args)

    def blobsize(self, *args) -> "size_t":
        r"""


        blobsize(self, _start, tag) -> size_t
            _start: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_blobsize(self, *args)

    def blobsize_ea(self, *args) -> "size_t":
        r"""


        blobsize_ea(self, ea, tag) -> size_t
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_blobsize_ea(self, *args)

    def setblob(self, *args) -> "bool":
        r"""


        setblob(self, buf, _start, tag) -> bool
            buf: void const *
            _start: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_setblob(self, *args)

    def setblob_ea(self, *args) -> "bool":
        r"""


        setblob_ea(self, buf, ea, tag) -> bool
            buf: void const *
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_setblob_ea(self, *args)

    def delblob(self, *args) -> "int":
        r"""


        delblob(self, _start, tag) -> int
            _start: nodeidx_t
            tag: uchar
        """
        return _ida_netnode.netnode_delblob(self, *args)

    def delblob_ea(self, *args) -> "int":
        r"""


        delblob_ea(self, ea, tag) -> int
            ea: ea_t
            tag: uchar
        """
        return _ida_netnode.netnode_delblob_ea(self, *args)

    def start(self, *args) -> "bool":
        r"""
        start(self) -> bool
        """
        return _ida_netnode.netnode_start(self, *args)

    def end(self, *args) -> "bool":
        r"""
        end(self) -> bool
        """
        return _ida_netnode.netnode_end(self, *args)

    def next(self, *args) -> "bool":
        r"""
        next(self) -> bool
        """
        return _ida_netnode.netnode_next(self, *args)

    def prev(self, *args) -> "bool":
        r"""
        prev(self) -> bool
        """
        return _ida_netnode.netnode_prev(self, *args)

    def copyto(self, *args) -> "size_t":
        r"""


        copyto(self, target, count=1) -> size_t
            target: netnode
            count: nodeidx_t
        """
        return _ida_netnode.netnode_copyto(self, *args)

    def moveto(self, *args) -> "size_t":
        r"""


        moveto(self, target, count=1) -> size_t
            target: netnode
            count: nodeidx_t
        """
        return _ida_netnode.netnode_moveto(self, *args)

    def __eq__(self, *args) -> "bool":
        r"""


        __eq__(self, n) -> bool
            n: netnode &
        

        __eq__(self, x) -> bool
            x: nodeidx_t
        """
        return _ida_netnode.netnode___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        r"""


        __ne__(self, n) -> bool
            n: netnode &
        

        __ne__(self, x) -> bool
            x: nodeidx_t
        """
        return _ida_netnode.netnode___ne__(self, *args)

    def index(self, *args) -> "nodeidx_t":
        r"""
        index(self) -> nodeidx_t
        """
        return _ida_netnode.netnode_index(self, *args)

    def getblob(self, *args) -> "PyObject *":
        r"""


        getblob(self, start, tag) -> PyObject *
            start: nodeidx_t
            tag: char
        """
        return _ida_netnode.netnode_getblob(self, *args)

    def getclob(self, *args) -> "PyObject *":
        r"""


        getclob(self, start, tag) -> PyObject *
            start: nodeidx_t
            tag: char
        """
        return _ida_netnode.netnode_getclob(self, *args)

    def getblob_ea(self, *args) -> "PyObject *":
        r"""


        getblob_ea(self, ea, tag) -> PyObject *
            ea: ea_t
            tag: char
        """
        return _ida_netnode.netnode_getblob_ea(self, *args)

    def hashstr_buf(self, *args) -> "PyObject *":
        r"""


        hashstr_buf(self, idx, tag=htag) -> PyObject *
            idx: char const *
            tag: char
        """
        return _ida_netnode.netnode_hashstr_buf(self, *args)

    def hashset_buf(self, *args) -> "bool":
        r"""


        hashset_buf(self, idx, py_str, tag=htag) -> bool
            idx: char const *
            py_str: PyObject *
            tag: char
        """
        return _ida_netnode.netnode_hashset_buf(self, *args)

    def supset(self, *args) -> "bool":
        r"""


        supset(self, alt, value, tag=stag) -> bool
            alt: nodeidx_t
            value: void const *
            tag: uchar
        

        supset(self, alt, value, tag=stag) -> bool
            alt: nodeidx_t
            value: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_supset(self, *args)

    def supset_ea(self, *args) -> "bool":
        r"""


        supset_ea(self, ea, value, tag=stag) -> bool
            ea: ea_t
            value: void const *
            tag: uchar
        

        supset_ea(self, ea, value, tag=stag) -> bool
            ea: ea_t
            value: char const *
            tag: uchar
        """
        return _ida_netnode.netnode_supset_ea(self, *args)
    __swig_destroy__ = _ida_netnode.delete_netnode

# Register netnode in _ida_netnode:
_ida_netnode.netnode_swigregister(netnode)
cvar = _ida_netnode.cvar
MAXNAMESIZE = cvar.MAXNAMESIZE
MAX_NODENAME_SIZE = cvar.MAX_NODENAME_SIZE
MAXSPECSIZE = cvar.MAXSPECSIZE
atag = cvar.atag
stag = cvar.stag
htag = cvar.htag
vtag = cvar.vtag
ntag = cvar.ntag
ltag = cvar.ltag
NETMAP_IDX = cvar.NETMAP_IDX
NETMAP_VAL = cvar.NETMAP_VAL
NETMAP_STR = cvar.NETMAP_STR
NETMAP_X8 = cvar.NETMAP_X8
NETMAP_V8 = cvar.NETMAP_V8

def exist(*args) -> "bool":
    r"""


    exist(n) -> bool
        n: netnode const &
    """
    return _ida_netnode.exist(*args)


if _BC695:
    netnode.alt1st       = netnode.altfirst
    netnode.alt1st_idx8  = netnode.altfirst_idx8
    netnode.altnxt       = netnode.altnext
    netnode.char1st      = netnode.charfirst
    netnode.char1st_idx8 = netnode.charfirst_idx8
    netnode.charnxt      = netnode.charnext
    netnode.hash1st      = netnode.hashfirst
    netnode.hashnxt      = netnode.hashnext
    netnode.sup1st       = netnode.supfirst
    netnode.sup1st_idx8  = netnode.supfirst_idx8
    netnode.supnxt       = netnode.supnext



