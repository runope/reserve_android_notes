# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IDA Plugin SDK API wrapper: auto
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_auto
else:
    import _ida_auto

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """
    Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass
    """
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """
    Meta class to enforce nondynamic attributes (no new attributes) for a class
    """
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_PYTHON_LEGACY_BOOL = _ida_auto.SWIG_PYTHON_LEGACY_BOOL

import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def get_auto_state(*args) -> "atype_t":
    r"""


    Get current state of autoanalyzer. If auto_state == 'AU_NONE' , IDA is
    currently not running the analysis (it could be temporarily
    interrupted to perform the user's requests, for example).
    """
    return _ida_auto.get_auto_state(*args)

def set_auto_state(*args) -> "atype_t":
    r"""


    Set current state of autoanalyzer.
    
    set_auto_state(new_state) -> atype_t
        @param new_state: new state of autoanalyzer (C++: atype_t)
        @return: previous state
    """
    return _ida_auto.set_auto_state(*args)
class auto_display_t(object):
    r"""
    Proxy of C++ auto_display_t class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_ida_auto.auto_display_t_type_get, _ida_auto.auto_display_t_type_set)
    ea = property(_ida_auto.auto_display_t_ea_get, _ida_auto.auto_display_t_ea_set)
    state = property(_ida_auto.auto_display_t_state_get, _ida_auto.auto_display_t_state_set)

    def __init__(self, *args):
        r"""
        __init__(self) -> auto_display_t
        """
        _ida_auto.auto_display_t_swiginit(self, _ida_auto.new_auto_display_t(*args))
    __swig_destroy__ = _ida_auto.delete_auto_display_t

# Register auto_display_t in _ida_auto:
_ida_auto.auto_display_t_swigregister(auto_display_t)
cvar = _ida_auto.cvar
AU_NONE = cvar.AU_NONE
AU_UNK = cvar.AU_UNK
AU_CODE = cvar.AU_CODE
AU_WEAK = cvar.AU_WEAK
AU_PROC = cvar.AU_PROC
AU_TAIL = cvar.AU_TAIL
AU_FCHUNK = cvar.AU_FCHUNK
AU_USED = cvar.AU_USED
AU_TYPE = cvar.AU_TYPE
AU_LIBF = cvar.AU_LIBF
AU_LBF2 = cvar.AU_LBF2
AU_LBF3 = cvar.AU_LBF3
AU_CHLB = cvar.AU_CHLB
AU_FINAL = cvar.AU_FINAL
st_Ready = cvar.st_Ready
st_Think = cvar.st_Think
st_Waiting = cvar.st_Waiting
st_Work = cvar.st_Work


def get_auto_display(*args) -> "bool":
    r"""


    Get structure which holds the autoanalysis indicator contents.
    
    get_auto_display(auto_display) -> bool
        @param auto_display (C++: auto_display_t  *)
    """
    return _ida_auto.get_auto_display(*args)

def show_auto(*args) -> "void":
    r"""


    Change autoanalysis indicator value.
    
    show_auto(ea, type=AU_NONE)
        @param ea: linear address being analyzed (C++: ea_t)
        @param type: autoanalysis type (see  Autoanalysis queues ) (C++:
                     atype_t)
    """
    return _ida_auto.show_auto(*args)

def show_addr(*args) -> "void":
    r"""


    Show an address on the autoanalysis indicator. The address is
    displayed in the form " @:12345678".
    
    show_addr(ea)
        @param ea: - linear address to display (C++: ea_t)
    """
    return _ida_auto.show_addr(*args)

def set_ida_state(*args) -> "idastate_t":
    r"""


    Change IDA status indicator value
    
    set_ida_state(st) -> idastate_t
        @param st: - new indicator status (C++: idastate_t)
        @return: old indicator status
    """
    return _ida_auto.set_ida_state(*args)

def may_create_stkvars(*args) -> "bool":
    r"""


    Is it allowed to create stack variables automatically?. This function
    should be used by IDP modules before creating stack vars.
    """
    return _ida_auto.may_create_stkvars(*args)

def may_trace_sp(*args) -> "bool":
    r"""


    Is it allowed to trace stack pointer automatically?. This function
    should be used by IDP modules before tracing sp.
    """
    return _ida_auto.may_trace_sp(*args)

def auto_mark_range(*args) -> "void":
    r"""


    Put range of addresses into a queue. 'start' may be higher than 'end',
    the kernel will swap them in this case. 'end' doesn't belong to the
    range.
    
    auto_mark_range(start, end, type)
        @param start (C++: ea_t)
        @param end (C++: ea_t)
        @param type (C++: atype_t)
    """
    return _ida_auto.auto_mark_range(*args)

def auto_mark(*args) -> "void":
    r"""


    Put single address into a queue. Queues keep addresses sorted.
    
    auto_mark(ea, type)
        @param ea (C++: ea_t)
        @param type (C++: atype_t)
    """
    return _ida_auto.auto_mark(*args)

def auto_unmark(*args) -> "void":
    r"""


    Remove range of addresses from a queue. 'start' may be higher than
    'end', the kernel will swap them in this case. 'end' doesn't belong to
    the range.
    
    auto_unmark(start, end, type)
        @param start (C++: ea_t)
        @param end (C++: ea_t)
        @param type (C++: atype_t)
    """
    return _ida_auto.auto_unmark(*args)

def plan_ea(*args) -> "void":
    r"""


    Plan to perform reanalysis.
    
    plan_ea(ea)
        @param ea (C++: ea_t)
    """
    return _ida_auto.plan_ea(*args)

def plan_range(*args) -> "void":
    r"""


    Plan to perform reanalysis.
    
    plan_range(sEA, eEA)
        @param sEA (C++: ea_t)
        @param eEA (C++: ea_t)
    """
    return _ida_auto.plan_range(*args)

def auto_make_code(*args) -> "void":
    r"""


    Plan to make code.
    
    auto_make_code(ea)
        @param ea (C++: ea_t)
    """
    return _ida_auto.auto_make_code(*args)

def auto_make_proc(*args) -> "void":
    r"""


    Plan to make code&function.
    
    auto_make_proc(ea)
        @param ea (C++: ea_t)
    """
    return _ida_auto.auto_make_proc(*args)

def reanalyze_callers(*args) -> "void":
    r"""


    Plan to reanalyze callers of the specified address. This function will
    add to 'AU_USED' queue all instructions that call (not jump to) the
    specified address.
    
    reanalyze_callers(ea, noret)
        @param ea: linear address of callee (C++: ea_t)
        @param noret: !=0: the callee doesn't return, mark to undefine
                      subsequent instructions in the caller. 0: do nothing.
                      (C++: bool)
    """
    return _ida_auto.reanalyze_callers(*args)

def revert_ida_decisions(*args) -> "void":
    r"""


    Delete all analysis info that IDA generated for for the given range.
    
    revert_ida_decisions(ea1, ea2)
        @param ea1 (C++: ea_t)
        @param ea2 (C++: ea_t)
    """
    return _ida_auto.revert_ida_decisions(*args)

def auto_apply_type(*args) -> "void":
    r"""


    Plan to apply the callee's type to the calling point.
    
    auto_apply_type(caller, callee)
        @param caller (C++: ea_t)
        @param callee (C++: ea_t)
    """
    return _ida_auto.auto_apply_type(*args)

def auto_apply_tail(*args) -> "void":
    r"""


    Plan to apply the tail_ea chunk to the parent
    
    auto_apply_tail(tail_ea, parent_ea)
        @param tail_ea: linear address of start of tail (C++: ea_t)
        @param parent_ea: linear address within parent. If BADADDR,
                          automatically try to find parent via xrefs. (C++:
                          ea_t)
    """
    return _ida_auto.auto_apply_tail(*args)

def plan_and_wait(*args) -> "int":
    r"""


    Analyze the specified range. Try to create instructions where
    possible. Make the final pass over the specified range if specified.
    This function doesn't return until the range is analyzed.
    
    plan_and_wait(ea1, ea2, final_pass=True) -> int
        @param ea1 (C++: ea_t)
        @param ea2 (C++: ea_t)
        @param final_pass (C++: bool)
        @retval: 1 - ok
        @retval: 0 - Ctrl-Break was pressed
    """
    return _ida_auto.plan_and_wait(*args)

def auto_wait(*args) -> "bool":
    r"""


    Process everything in the queues and return true.
    """
    return _ida_auto.auto_wait(*args)

def auto_wait_range(*args) -> "ssize_t":
    r"""


    Process everything in the specified range and return true.
    
    auto_wait_range(ea1, ea2) -> ssize_t
        @param ea1 (C++: ea_t)
        @param ea2 (C++: ea_t)
        @return: number of autoanalysis steps made. -1 if the user clicked
                 cancel. (the wait box must be displayed by the caller if
                 desired)
    """
    return _ida_auto.auto_wait_range(*args)

def auto_make_step(*args) -> "bool":
    r"""


    Analyze one address in the specified range and return true.
    
    auto_make_step(ea1, ea2) -> bool
        @param ea1 (C++: ea_t)
        @param ea2 (C++: ea_t)
        @return: if processed anything. false means that there is nothing to
                 process in the specified range.
    """
    return _ida_auto.auto_make_step(*args)

def auto_cancel(*args) -> "void":
    r"""


    Remove an address range (ea1..ea2) from queues 'AU_CODE' , 'AU_PROC' ,
    'AU_USED' . To remove an address range from other queues use
    'auto_unmark()' function. 'ea1' may be higher than 'ea2', the kernel
    will swap them in this case. 'ea2' doesn't belong to the range.
    
    auto_cancel(ea1, ea2)
        @param ea1 (C++: ea_t)
        @param ea2 (C++: ea_t)
    """
    return _ida_auto.auto_cancel(*args)

def auto_is_ok(*args) -> "bool":
    r"""


    Are all queues empty? (i.e. has autoanalysis finished?).
    """
    return _ida_auto.auto_is_ok(*args)

def peek_auto_queue(*args) -> "ea_t":
    r"""


    Peek into a queue 'type' for an address not lower than 'low_ea'. Do
    not remove address from the queue.
    
    peek_auto_queue(low_ea, type) -> ea_t
        @param low_ea (C++: ea_t)
        @param type (C++: atype_t)
        @return: the address or  BADADDR
    """
    return _ida_auto.peek_auto_queue(*args)

def auto_get(*args) -> "ea_t":
    r"""


    Retrieve an address from queues regarding their priority. Returns
    'BADADDR' if no addresses not lower than 'lowEA' and less than
    'highEA' are found in the queues. Otherwise *type will have queue
    type.
    
    auto_get(type, lowEA, highEA) -> ea_t
        @param type (C++: atype_t  *)
        @param lowEA (C++: ea_t)
        @param highEA (C++: ea_t)
    """
    return _ida_auto.auto_get(*args)

def auto_recreate_insn(*args) -> "int":
    r"""


    Try to create instruction
    
    auto_recreate_insn(ea) -> int
        @param ea: linear address of callee (C++: ea_t)
        @return: the length of the instruction or 0
    """
    return _ida_auto.auto_recreate_insn(*args)

def is_auto_enabled(*args) -> "bool":
    r"""


    Get autoanalyzer state.
    """
    return _ida_auto.is_auto_enabled(*args)

def enable_auto(*args) -> "bool":
    r"""


    Temporarily enable/disable autoanalyzer. Not user-facing, but rather
    because IDA sometimes need to turn AA on/off regardless of
    inf.s_genflags:INFFL_AUTO
    
    enable_auto(enable) -> bool
        @param enable (C++: bool)
        @return: old state
    """
    return _ida_auto.enable_auto(*args)

if _BC695:
    analyze_area = plan_and_wait
    autoCancel = auto_cancel
    autoIsOk = auto_is_ok
    autoMark = auto_mark
    autoUnmark = auto_unmark
    autoWait = auto_wait
    noUsed = plan_ea
    setStat = set_ida_state
    showAddr = show_addr
    showAuto = show_auto



